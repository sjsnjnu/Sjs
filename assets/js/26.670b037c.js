(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{434:function(i,t,a){"use strict";a.r(t);var e=a(2),o=Object(e.a)({},(function(){var i=this,t=i._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[t("h3",{attrs:{id:"modeling-and-verification-of-service-allocation-policies-for-multi-access-edge-computing-using-probabilistic-model-check-基于概率模型检测的多址边缘计算服务分配策略建模与验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modeling-and-verification-of-service-allocation-policies-for-multi-access-edge-computing-using-probabilistic-model-check-基于概率模型检测的多址边缘计算服务分配策略建模与验证"}},[i._v("#")]),i._v(" Modeling and Verification of Service Allocation Policies for Multi-Access Edge Computing Using Probabilistic Model Check：基于概率模型检测的多址边缘计算服务分配策略建模与验证")]),i._v(" "),t("h3",{attrs:{id:"摘要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#摘要"}},[i._v("#")]),i._v(" 摘要：")]),i._v(" "),t("p",[i._v("近年来，多址边缘计算MEC已成为一种新的范例，允许低延迟访问部署在边缘节点上的服务，提供计算、存储和通信设施。供应商将其服务部署在MEC服务器上，以提高性能并减少访问云服务时经常遇到的工作延迟。分配策略确定如何将服务请求从用户分配到MEC服务器。许多文献建议将用户服务请求绑定到附近边缘服务器，但这些提议都没有为性能指标提供定量保护。Indeed，不断变化的环境以及巨大的分配配置空间使得为此类分配策略提供性能保证成为一项挑战性任务。Further，"),t("strong",[i._v("MEC服务器故障")]),i._v("对分配策略的影响还没有得到探索。To address such issues，我们提出了一种跟踪驱动的方法来推导分配策略的形式模型，并进行定量验证，以产生性能指标的概率保证。我们使用旧金山出租车数据集🚕，LDNS可用性数据集和最新文献中的分配策略来验证该方法。结果表明，我们的模型可以用来定量比较MEC系统中服务分配策略的性能指标。")]),i._v(" "),t("h5",{attrs:{id:"index-terms-multi-access-edge-computing-service-allocation-probabilistic-model-checking-performance-modeling"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#index-terms-multi-access-edge-computing-service-allocation-probabilistic-model-checking-performance-modeling"}},[i._v("#")]),i._v(" Index Terms - Multi-access edge computing, service allocation, probabilistic model checking, performance modeling")]),i._v(" "),t("h3",{attrs:{id:"introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[i._v("#")]),i._v(" Introduction")]),i._v(" "),t("p",[i._v("物联网(Internet-of-Things)，物联网领域的软件服务和应用程序的数量和复杂程度(sophistication)急剧增加。此类服务通常需要高处理性能和延迟要求，为了满足这类场景，设备通常辅之以云服务，以提高用户应用程序的服务质量。然而，这种机制并总是能满足实时服务的Qos要求，如面部识别，在线游戏，视频流等。MEC是一种新的服务提供范式，中心思想是让服务提供商将其服务部署在位于移动基站的MEC服务器上，用户服务调用通常在其移动过程中路由到附近的MEC服务器，并从其提供服务，延迟和周转时间得到改善，从而减轻了云通信网络的高延迟影响。")]),i._v(" "),t("p",[i._v("​\t服务分配策略确定用户服务服务器绑定，分配策略的一个关键要素是"),t("strong",[i._v("迁移决策组件")]),i._v("，用于在用户移动或服务器出现故障时，将用户请求的服务从服务器迁移到另一台服务器。")]),i._v(" "),t("h4",{attrs:{id:"motivation-and-objectives"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#motivation-and-objectives"}},[i._v("#")]),i._v(" Motivation and Objectives")]),i._v(" "),t("p",[i._v("MEC分配策略的一个关键问题是，它们无法从本质上确保性能指标的任何定量保证，e.g.,服务请求等待⌛️时间始终在所需要求范围内。🤔Additionally，对MEC服务器故障的考虑过少。提供性能保证是一项复杂的任务，因为：")]),i._v(" "),t("ol",[t("li",[t("p",[i._v("the  large  configuration  space of  the  user-request-server  bindings  that  a  policy  can  adhere to;")]),i._v(" "),t("p",[i._v("（一个策略需要大量的配置空间，用于用户请求和服务器绑定？）🎋")])]),i._v(" "),t("li",[t("p",[i._v("用户移动性和服务请求的随机性；")])]),i._v(" "),t("li",[t("p",[i._v("MEC服务器故障的随机性")])]),i._v(" "),t("li",[t("p",[i._v("边缘服务器上执行的任务引起的延迟的不可预测性")])])]),i._v(" "),t("p",[i._v("传统的基于性能的建模策略开发分析模型来推导性能界限，相反，这项工作的动机是设计一个正式的框架来自动定量分析服务分配策略，而无需分析和推导每个性能特征的界限。")]),i._v(" "),t("h4",{attrs:{id:"approach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#approach"}},[i._v("#")]),i._v(" Approach")]),i._v(" "),t("p",[i._v("​\t为了解决分配策略的定量验证问题，我们开发了一个框架来生成MEC策略的概率模型。我们使用跟踪驱动的方法来生成(策略的详细实现未知)的模型。跟踪驱动建模允许分配策略的特征化，而无需对每个策略的设计详细的分析建模🔎。此外，为了分析MEC服务器故障的影响，我们将不同MEC组件之间的交互建模为一个基于回合的随机多人游戏，？此外，为了根据性能定量分析分配策略，我们使用"),t("strong",[i._v("概率模型检测")]),i._v("，这是一种形式化方法。用于推导具有概率行为的系统的定量保证。")]),i._v(" "),t("h4",{attrs:{id:"our-contributions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#our-contributions"}},[i._v("#")]),i._v(" Our Contributions")]),i._v(" "),t("p",[i._v("​\t与经典的分配策略不同，基于强化学习的策略以奖励信号🚥的形式与环境进行交互，以表征策略生成的服务请求分配的有效性。分析此类策略所做的每个决策，量化每个决策的有效性。我们演示了如何使用跟踪驱动方法来描述此类策略。此外，为了分析MEC服务器故障对经典和强化学习分配策略的影响，我们提出了一个新的跟踪驱动博弈模型，以深入了解此类策略的工作原理。Main highlights:")]),i._v(" "),t("ul",[t("li",[i._v("正式定义和建模了经典分配和基于强化学习的分配策略🏠")]),i._v(" "),t("li",[i._v("对MEC环境的组件进行建模，并将这些组件之间的交互表示为一个多人游戏🧊")]),i._v(" "),t("li",[i._v("我们描述了几个性能指标，并具体说明了如何将场景编码为形式属性，以定量验证这些指标🌲")]),i._v(" "),t("li",[i._v("我们在基准数据集上对最近MEC文献中的一些流行分配策略进行了实验🧪")])]),i._v(" "),t("h3",{attrs:{id:"motivating-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#motivating-example"}},[i._v("#")]),i._v(" Motivating Example")]),i._v(" "),t("p",[t("img",{attrs:{src:"https://sjscs.oss-cn-hangzhou.aliyuncs.com/test/202208091649529.png",alt:"image-20220809164941453"}}),i._v("\t如图，三个MEC服务器A、B、C，坐标是(Xa, Ya)，服务器的覆盖范围是r。游戏🎮提供商在所有此类服务器上相同地部署其服务。每个服务器都有容量，表示可以提供的用户服务请求的数量。可以假设每个服务请求都需要相同的资源需求。")]),i._v(" "),t("p",[i._v("​\t假设每个服务器都有同时服务三个游戏服务调用的能力。在重叠区域中的服务请求可以迁移。现在，让m1沿虚线移动，当移动到zoneAB时，B可能向其提供服务，但如果B向其提供服务了，此时，如果m4沿实线移动到zoneB那么就无法得到服务。")]),i._v(" "),t("p",[i._v("​\t在给定分配策略的情况下，确定其对未知移动模式的适用性并请求分配，并验证其是否满足期望的性能指标，是我们要解决的问题。")]),i._v(" "),t("h3",{attrs:{id:"formal-modeling-and-verification-of-allocation-policies"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#formal-modeling-and-verification-of-allocation-policies"}},[i._v("#")]),i._v(" Formal Modeling And Verification Of Allocation Policies")])])}),[],!1,null,null,null);t.default=o.exports}}]);